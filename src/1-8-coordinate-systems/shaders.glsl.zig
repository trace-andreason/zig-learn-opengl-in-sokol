const sg = @import("sokol").gfx;
const zalg = @import("zalgebra");
//
//  #version:1# (machine generated, don't edit!)
//
//  Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
//
//  Cmdline: sokol-shdc -i /Users/twork/Documents/zig/test/src/1-8-coordinate-systems/shaders.glsl -o /Users/twork/Documents/zig/test/src/1-8-coordinate-systems/shaders.glsl.zig -f sokol_zig -l glsl330:metal_macos:hlsl4:glsl300es:wgsl
//
//  Overview:
//
//      Shader program 'simple':
//          Get shader desc: shd.simpleShaderDesc(sg.queryBackend());
//          Vertex shader: vs
//              Attribute slots:
//                  ATTR_vs_aPos = 0
//                  ATTR_vs_aTexCoord = 1
//              Uniform block 'vs_params':
//                  C struct: vs_params_t
//                  Bind slot: SLOT_vs_params = 0
//          Fragment shader: fs
//              Image '_texture1':
//                  Image Type: ._2D
//                  Sample Type: .FLOAT
//                  Multisampled: false
//                  Bind slot: SLOT__texture1 = 0
//              Image '_texture2':
//                  Image Type: ._2D
//                  Sample Type: .FLOAT
//                  Multisampled: false
//                  Bind slot: SLOT__texture2 = 1
//              Sampler 'texture1_smp':
//                  Type: .FILTERING
//                  Bind slot: SLOT_texture1_smp = 0
//              Sampler 'texture2_smp':
//                  Type: .FILTERING
//                  Bind slot: SLOT_texture2_smp = 1
//              Image Sampler Pair '_texture1_texture1_smp':
//                  Image: _texture1
//                  Sampler: texture1_smp
//              Image Sampler Pair '_texture2_texture2_smp':
//                  Image: _texture2
//                  Sampler: texture2_smp
//
//
pub const ATTR_vs_aPos = 0;
pub const ATTR_vs_aTexCoord = 1;
pub const SLOT__texture1 = 0;
pub const SLOT__texture2 = 1;
pub const SLOT_texture1_smp = 0;
pub const SLOT_texture2_smp = 1;
pub const SLOT_vs_params = 0;
pub const VsParams = extern struct {
    model: zalg.Mat4 align(16),
    view: zalg.Mat4,
    projection: zalg.Mat4,
};
//
// #version 330
//
// uniform vec4 vs_params[12];
// layout(location = 0) in vec3 aPos;
// out vec2 TexCoord;
// layout(location = 1) in vec2 aTexCoord;
//
// void main()
// {
//     gl_Position = ((mat4(vs_params[8], vs_params[9], vs_params[10], vs_params[11]) * mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7])) * mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3])) * vec4(aPos, 1.0);
//     TexCoord = aTexCoord;
// }
//
//
const vs_source_glsl330 = [411]u8{
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e,
    0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61,
    0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x32, 0x5d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
    0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x69,
    0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x6f, 0x75, 0x74,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a,
    0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x61, 0x54, 0x65,
    0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61,
    0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f,
    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28,
    0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x38, 0x5d, 0x2c, 0x20, 0x76, 0x73,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x39, 0x5d, 0x2c, 0x20, 0x76, 0x73, 0x5f, 0x70,
    0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x30, 0x5d, 0x2c, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61,
    0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x31, 0x5d, 0x29, 0x20, 0x2a, 0x20, 0x6d, 0x61, 0x74, 0x34,
    0x28, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x34, 0x5d, 0x2c, 0x20, 0x76,
    0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x35, 0x5d, 0x2c, 0x20, 0x76, 0x73, 0x5f,
    0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x36, 0x5d, 0x2c, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61,
    0x72, 0x61, 0x6d, 0x73, 0x5b, 0x37, 0x5d, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x6d, 0x61, 0x74, 0x34,
    0x28, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x76,
    0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x76, 0x73, 0x5f,
    0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61,
    0x72, 0x61, 0x6d, 0x73, 0x5b, 0x33, 0x5d, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x76, 0x65, 0x63, 0x34,
    0x28, 0x61, 0x50, 0x6f, 0x73, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x61, 0x54, 0x65, 0x78,
    0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
//
// #version 330
//
// uniform sampler2D _texture1_texture1_smp;
// uniform sampler2D _texture2_texture2_smp;
//
// layout(location = 0) out vec4 FragColor;
// in vec2 TexCoord;
//
// void main()
// {
//     FragColor = mix(texture(_texture1_texture1_smp, TexCoord), texture(_texture2_texture2_smp, TexCoord), vec4(0.20000000298023223876953125));
// }
//
//
const fs_source_glsl330 = [320]u8{
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e,
    0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20,
    0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
    0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20,
    0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75,
    0x72, 0x65, 0x32, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x70,
    0x3b, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34,
    0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x69, 0x6e, 0x20, 0x76,
    0x65, 0x63, 0x32, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x0a, 0x76,
    0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78,
    0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
    0x65, 0x31, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x2c,
    0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74,
    0x75, 0x72, 0x65, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x74, 0x65,
    0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x54, 0x65, 0x78, 0x43,
    0x6f, 0x6f, 0x72, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x32, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32, 0x33, 0x38,
    0x37, 0x36, 0x39, 0x35, 0x33, 0x31, 0x32, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
//
// #version 300 es
//
// uniform vec4 vs_params[12];
// layout(location = 0) in vec3 aPos;
// out vec2 TexCoord;
// layout(location = 1) in vec2 aTexCoord;
//
// void main()
// {
//     gl_Position = ((mat4(vs_params[8], vs_params[9], vs_params[10], vs_params[11]) * mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7])) * mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3])) * vec4(aPos, 1.0);
//     TexCoord = aTexCoord;
// }
//
//
const vs_source_glsl300es = [414]u8{
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x30, 0x30, 0x20, 0x65, 0x73, 0x0a,
    0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x73,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x32, 0x5d, 0x3b, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30,
    0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61, 0x50, 0x6f, 0x73, 0x3b, 0x0a,
    0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20,
    0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64,
    0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c,
    0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x6d, 0x61,
    0x74, 0x34, 0x28, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x38, 0x5d, 0x2c,
    0x20, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x39, 0x5d, 0x2c, 0x20, 0x76,
    0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x30, 0x5d, 0x2c, 0x20, 0x76, 0x73,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x31, 0x5d, 0x29, 0x20, 0x2a, 0x20, 0x6d,
    0x61, 0x74, 0x34, 0x28, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x34, 0x5d,
    0x2c, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x35, 0x5d, 0x2c, 0x20,
    0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x36, 0x5d, 0x2c, 0x20, 0x76, 0x73,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x37, 0x5d, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x6d,
    0x61, 0x74, 0x34, 0x28, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x30, 0x5d,
    0x2c, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d, 0x2c, 0x20,
    0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x76, 0x73,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x33, 0x5d, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x76,
    0x65, 0x63, 0x34, 0x28, 0x61, 0x50, 0x6f, 0x73, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x61,
    0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
//
// #version 300 es
// precision mediump float;
// precision highp int;
//
// uniform highp sampler2D _texture1_texture1_smp;
// uniform highp sampler2D _texture2_texture2_smp;
//
// layout(location = 0) out highp vec4 FragColor;
// in highp vec2 TexCoord;
//
// void main()
// {
//     FragColor = mix(texture(_texture1_texture1_smp, TexCoord), texture(_texture2_texture2_smp, TexCoord), vec4(0.20000000298023223876953125));
// }
//
//
const fs_source_glsl300es = [393]u8{
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x30, 0x30, 0x20, 0x65, 0x73, 0x0a,
    0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
    0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
    0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x0a, 0x75,
    0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d,
    0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31,
    0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x3b, 0x0a, 0x75,
    0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d,
    0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32,
    0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x70, 0x3b, 0x0a, 0x0a,
    0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76,
    0x65, 0x63, 0x34, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x69,
    0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x54, 0x65, 0x78,
    0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69,
    0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f,
    0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
    0x65, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x74, 0x65, 0x78, 0x74,
    0x75, 0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f,
    0x72, 0x64, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x74, 0x65,
    0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f,
    0x73, 0x6d, 0x70, 0x2c, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x2c, 0x20,
    0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32,
    0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32, 0x33, 0x38, 0x37, 0x36, 0x39, 0x35, 0x33, 0x31, 0x32,
    0x35, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
//
// cbuffer vs_params : register(b0)
// {
//     row_major float4x4 _19_model : packoffset(c0);
//     row_major float4x4 _19_view : packoffset(c4);
//     row_major float4x4 _19_projection : packoffset(c8);
// };
//
//
// static float4 gl_Position;
// static float3 aPos;
// static float2 TexCoord;
// static float2 aTexCoord;
//
// struct SPIRV_Cross_Input
// {
//     float3 aPos : TEXCOORD0;
//     float2 aTexCoord : TEXCOORD1;
// };
//
// struct SPIRV_Cross_Output
// {
//     float2 TexCoord : TEXCOORD0;
//     float4 gl_Position : SV_Position;
// };
//
// void vert_main()
// {
//     gl_Position = mul(float4(aPos, 1.0f), mul(_19_model, mul(_19_view, _19_projection)));
//     TexCoord = aTexCoord;
// }
//
// SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
// {
//     aPos = stage_input.aPos;
//     aTexCoord = stage_input.aTexCoord;
//     vert_main();
//     SPIRV_Cross_Output stage_output;
//     stage_output.gl_Position = gl_Position;
//     stage_output.TexCoord = TexCoord;
//     return stage_output;
// }
//
const vs_source_hlsl4 = [918]u8{
    0x63, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
    0x73, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x62, 0x30, 0x29,
    0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x5f, 0x31, 0x39, 0x5f, 0x6d, 0x6f,
    0x64, 0x65, 0x6c, 0x20, 0x3a, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
    0x28, 0x63, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
    0x6a, 0x6f, 0x72, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x5f, 0x31, 0x39,
    0x5f, 0x76, 0x69, 0x65, 0x77, 0x20, 0x3a, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x73,
    0x65, 0x74, 0x28, 0x63, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x6f, 0x77, 0x5f,
    0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x5f,
    0x31, 0x39, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20,
    0x70, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x63, 0x38, 0x29, 0x3b, 0x0a,
    0x7d, 0x3b, 0x0a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a,
    0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x61, 0x50,
    0x6f, 0x73, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x32, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f,
    0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49,
    0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x61, 0x50, 0x6f, 0x73,
    0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f,
    0x72, 0x64, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x31, 0x3b, 0x0a,
    0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56,
    0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f,
    0x6f, 0x72, 0x64, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50,
    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20,
    0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20,
    0x6d, 0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x61, 0x50, 0x6f, 0x73, 0x2c,
    0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x2c, 0x20, 0x6d, 0x75, 0x6c, 0x28, 0x5f, 0x31, 0x39, 0x5f,
    0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2c, 0x20, 0x6d, 0x75, 0x6c, 0x28, 0x5f, 0x31, 0x39, 0x5f, 0x76,
    0x69, 0x65, 0x77, 0x2c, 0x20, 0x5f, 0x31, 0x39, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x54, 0x65, 0x78, 0x43,
    0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64,
    0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73,
    0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49,
    0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73,
    0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x61, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
    0x6e, 0x70, 0x75, 0x74, 0x2e, 0x61, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61,
    0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28,
    0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f,
    0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
    0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75,
    0x74, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20,
    0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
};
//
// Texture2D<float4> _texture1 : register(t0);
// SamplerState texture1_smp : register(s0);
// Texture2D<float4> _texture2 : register(t1);
// SamplerState texture2_smp : register(s1);
//
// static float4 FragColor;
// static float2 TexCoord;
//
// struct SPIRV_Cross_Input
// {
//     float2 TexCoord : TEXCOORD0;
// };
//
// struct SPIRV_Cross_Output
// {
//     float4 FragColor : SV_Target0;
// };
//
// void frag_main()
// {
//     FragColor = lerp(_texture1.Sample(texture1_smp, TexCoord), _texture2.Sample(texture2_smp, TexCoord), 0.20000000298023223876953125f.xxxx);
// }
//
// SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
// {
//     TexCoord = stage_input.TexCoord;
//     frag_main();
//     SPIRV_Cross_Output stage_output;
//     stage_output.FragColor = FragColor;
//     return stage_output;
// }
//
const fs_source_hlsl4 = [734]u8{
    0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34,
    0x3e, 0x20, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x20, 0x3a, 0x20, 0x72, 0x65,
    0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74, 0x30, 0x29, 0x3b, 0x0a, 0x53, 0x61, 0x6d, 0x70,
    0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
    0x31, 0x5f, 0x73, 0x6d, 0x70, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
    0x28, 0x73, 0x30, 0x29, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e, 0x20, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
    0x32, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74, 0x31, 0x29,
    0x3b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74,
    0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x70, 0x20, 0x3a, 0x20, 0x72, 0x65,
    0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x73, 0x31, 0x29, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61,
    0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43,
    0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x32, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x0a, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73,
    0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3a, 0x20,
    0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73,
    0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20,
    0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x30, 0x3b, 0x0a, 0x7d, 0x3b,
    0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
    0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c,
    0x6f, 0x72, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75,
    0x72, 0x65, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75,
    0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x29, 0x2c, 0x20, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x2e, 0x53, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d,
    0x70, 0x2c, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x2c, 0x20, 0x30, 0x2e,
    0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32,
    0x33, 0x38, 0x37, 0x36, 0x39, 0x35, 0x33, 0x31, 0x32, 0x35, 0x66, 0x2e, 0x78, 0x78, 0x78, 0x78,
    0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73,
    0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50,
    0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20,
    0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f,
    0x72, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69,
    0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43,
    0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x43,
    0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61,
    0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
};
//
// #include <metal_stdlib>
// #include <simd/simd.h>
//
// using namespace metal;
//
// struct vs_params
// {
//     float4x4 model;
//     float4x4 view;
//     float4x4 projection;
// };
//
// struct main0_out
// {
//     float2 TexCoord [[user(locn0)]];
//     float4 gl_Position [[position]];
// };
//
// struct main0_in
// {
//     float3 aPos [[attribute(0)]];
//     float2 aTexCoord [[attribute(1)]];
// };
//
// vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _19 [[buffer(0)]])
// {
//     main0_out out = {};
//     out.gl_Position = ((_19.projection * _19.view) * _19.model) * float4(in.aPos, 1.0);
//     out.TexCoord = in.aTexCoord;
//     return out;
// }
//
//
const vs_source_metal_macos = [606]u8{
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f,
    0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a,
    0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20,
    0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x76,
    0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x76, 0x69, 0x65, 0x77,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x70,
    0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x54, 0x65, 0x78,
    0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63,
    0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b,
    0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a,
    0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x61, 0x50, 0x6f,
    0x73, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x30, 0x29,
    0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x61,
    0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69,
    0x62, 0x75, 0x74, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76,
    0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69,
    0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20,
    0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61,
    0x6d, 0x73, 0x26, 0x20, 0x5f, 0x31, 0x39, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
    0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69,
    0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x5f, 0x31, 0x39, 0x2e, 0x70, 0x72, 0x6f,
    0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x39, 0x2e, 0x76, 0x69,
    0x65, 0x77, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x39, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x29,
    0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x69, 0x6e, 0x2e, 0x61, 0x50, 0x6f,
    0x73, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74,
    0x2e, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x61,
    0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
//
// #include <metal_stdlib>
// #include <simd/simd.h>
//
// using namespace metal;
//
// struct main0_out
// {
//     float4 FragColor [[color(0)]];
// };
//
// struct main0_in
// {
//     float2 TexCoord [[user(locn0)]];
// };
//
// fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> _texture1 [[texture(0)]], texture2d<float> _texture2 [[texture(1)]], sampler texture1_smp [[sampler(0)]], sampler texture2_smp [[sampler(1)]])
// {
//     main0_out out = {};
//     out.FragColor = mix(_texture1.sample(texture1_smp, in.TexCoord), _texture2.sample(texture2_smp, in.TexCoord), float4(0.20000000298023223876953125));
//     return out;
// }
//
//
const fs_source_metal_macos = [599]u8{
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f,
    0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a,
    0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20,
    0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20,
    0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b,
    0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69,
    0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x54,
    0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c,
    0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61,
    0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69,
    0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20,
    0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e,
    0x20, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78,
    0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75,
    0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x5f, 0x74, 0x65, 0x78,
    0x74, 0x75, 0x72, 0x65, 0x32, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28,
    0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65,
    0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d,
    0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x70, 0x20,
    0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20,
    0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75,
    0x74, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x6d, 0x69,
    0x78, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70,
    0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x2c,
    0x20, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x2c, 0x20, 0x5f,
    0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28,
    0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x69, 0x6e,
    0x2e, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x28, 0x30, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x39, 0x38,
    0x30, 0x32, 0x33, 0x32, 0x32, 0x33, 0x38, 0x37, 0x36, 0x39, 0x35, 0x33, 0x31, 0x32, 0x35, 0x29,
    0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75,
    0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
//
// diagnostic(off, derivative_uniformity);
//
// struct vs_params {
//   /_ @offset(0) _/
//   model : mat4x4f,
//   /_ @offset(64) _/
//   view : mat4x4f,
//   /_ @offset(128) _/
//   projection : mat4x4f,
// }
//
// @group(0) @binding(0) var<uniform> x_19 : vs_params;
//
// var<private> aPos : vec3f;
//
// var<private> TexCoord : vec2f;
//
// var<private> aTexCoord : vec2f;
//
// var<private> gl_Position : vec4f;
//
// fn main_1() {
//   let x_23 : mat4x4f = x_19.projection;
//   let x_26 : mat4x4f = x_19.view;
//   let x_29 : mat4x4f = x_19.model;
//   let x_34 : vec3f = aPos;
//   gl_Position = (((x_23 * x_26) * x_29) * vec4f(x_34.x, x_34.y, x_34.z, 1.0f));
//   let x_48 : vec2f = aTexCoord;
//   TexCoord = x_48;
//   return;
// }
//
// struct main_out {
//   @builtin(position)
//   gl_Position : vec4f,
//   @location(0)
//   TexCoord_1 : vec2f,
// }
//
// @vertex
// fn main(@location(0) aPos_param : vec3f, @location(1) aTexCoord_param : vec2f) -> main_out {
//   aPos = aPos_param;
//   aTexCoord = aTexCoord_param;
//   main_1();
//   return main_out(gl_Position, TexCoord);
// }
//
//
const vs_source_wgsl = [973]u8{
    0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x28, 0x6f, 0x66, 0x66, 0x2c, 0x20,
    0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f,
    0x72, 0x6d, 0x69, 0x74, 0x79, 0x29, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20,
    0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x2f, 0x2a,
    0x20, 0x40, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x30, 0x29, 0x20, 0x2a, 0x2f, 0x0a, 0x20,
    0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x3a, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x78, 0x34, 0x66,
    0x2c, 0x0a, 0x20, 0x20, 0x2f, 0x2a, 0x20, 0x40, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x36,
    0x34, 0x29, 0x20, 0x2a, 0x2f, 0x0a, 0x20, 0x20, 0x76, 0x69, 0x65, 0x77, 0x20, 0x3a, 0x20, 0x6d,
    0x61, 0x74, 0x34, 0x78, 0x34, 0x66, 0x2c, 0x0a, 0x20, 0x20, 0x2f, 0x2a, 0x20, 0x40, 0x6f, 0x66,
    0x66, 0x73, 0x65, 0x74, 0x28, 0x31, 0x32, 0x38, 0x29, 0x20, 0x2a, 0x2f, 0x0a, 0x20, 0x20, 0x70,
    0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20, 0x6d, 0x61, 0x74, 0x34,
    0x78, 0x34, 0x66, 0x2c, 0x0a, 0x7d, 0x0a, 0x0a, 0x40, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x28, 0x30,
    0x29, 0x20, 0x40, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x28, 0x30, 0x29, 0x20, 0x76, 0x61,
    0x72, 0x3c, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x20, 0x78, 0x5f, 0x31, 0x39, 0x20,
    0x3a, 0x20, 0x76, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3b, 0x0a, 0x0a, 0x76, 0x61,
    0x72, 0x3c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3e, 0x20, 0x61, 0x50, 0x6f, 0x73, 0x20,
    0x3a, 0x20, 0x76, 0x65, 0x63, 0x33, 0x66, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x3c, 0x70, 0x72,
    0x69, 0x76, 0x61, 0x74, 0x65, 0x3e, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20,
    0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x66, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x3c, 0x70, 0x72,
    0x69, 0x76, 0x61, 0x74, 0x65, 0x3e, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64,
    0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x66, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x3c, 0x70,
    0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3e, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x34, 0x66, 0x3b, 0x0a, 0x0a, 0x66, 0x6e,
    0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x31, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x6c, 0x65,
    0x74, 0x20, 0x78, 0x5f, 0x32, 0x33, 0x20, 0x3a, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x78, 0x34, 0x66,
    0x20, 0x3d, 0x20, 0x78, 0x5f, 0x31, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78, 0x5f, 0x32, 0x36, 0x20, 0x3a,
    0x20, 0x6d, 0x61, 0x74, 0x34, 0x78, 0x34, 0x66, 0x20, 0x3d, 0x20, 0x78, 0x5f, 0x31, 0x39, 0x2e,
    0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78, 0x5f, 0x32, 0x39,
    0x20, 0x3a, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x78, 0x34, 0x66, 0x20, 0x3d, 0x20, 0x78, 0x5f, 0x31,
    0x39, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78,
    0x5f, 0x33, 0x34, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x33, 0x66, 0x20, 0x3d, 0x20, 0x61, 0x50,
    0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x78, 0x5f, 0x32, 0x33, 0x20, 0x2a, 0x20, 0x78, 0x5f,
    0x32, 0x36, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x5f, 0x32, 0x39, 0x29, 0x20, 0x2a, 0x20, 0x76, 0x65,
    0x63, 0x34, 0x66, 0x28, 0x78, 0x5f, 0x33, 0x34, 0x2e, 0x78, 0x2c, 0x20, 0x78, 0x5f, 0x33, 0x34,
    0x2e, 0x79, 0x2c, 0x20, 0x78, 0x5f, 0x33, 0x34, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66,
    0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78, 0x5f, 0x34, 0x38, 0x20, 0x3a,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x66, 0x20, 0x3d, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f,
    0x72, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d,
    0x20, 0x78, 0x5f, 0x34, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b,
    0x0a, 0x7d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
    0x6f, 0x75, 0x74, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x40, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
    0x28, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x0a, 0x20, 0x20, 0x67, 0x6c, 0x5f,
    0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x34, 0x66,
    0x2c, 0x0a, 0x20, 0x20, 0x40, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x30, 0x29,
    0x0a, 0x20, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x31, 0x20, 0x3a, 0x20,
    0x76, 0x65, 0x63, 0x32, 0x66, 0x2c, 0x0a, 0x7d, 0x0a, 0x0a, 0x40, 0x76, 0x65, 0x72, 0x74, 0x65,
    0x78, 0x0a, 0x66, 0x6e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x40, 0x6c, 0x6f, 0x63, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x28, 0x30, 0x29, 0x20, 0x61, 0x50, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61,
    0x6d, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x33, 0x66, 0x2c, 0x20, 0x40, 0x6c, 0x6f, 0x63, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x28, 0x31, 0x29, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x66, 0x29,
    0x20, 0x2d, 0x3e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x7b, 0x0a, 0x20,
    0x20, 0x61, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x61, 0x50, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x3b, 0x0a, 0x20, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20,
    0x3d, 0x20, 0x61, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61,
    0x6d, 0x3b, 0x0a, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x31, 0x28, 0x29, 0x3b, 0x0a, 0x20,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
    0x28, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x54, 0x65,
    0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
//
// diagnostic(off, derivative_uniformity);
//
// var<private> FragColor : vec4f;
//
// @group(1) @binding(32) var x_texture1 : texture_2d<f32>;
//
// @group(1) @binding(48) var texture1_smp : sampler;
//
// var<private> TexCoord : vec2f;
//
// @group(1) @binding(33) var x_texture2 : texture_2d<f32>;
//
// @group(1) @binding(49) var texture2_smp : sampler;
//
// fn main_1() {
//   let x_23 : vec2f = TexCoord;
//   let x_24 : vec4f = textureSample(x_texture1, texture1_smp, x_23);
//   let x_30 : vec2f = TexCoord;
//   let x_31 : vec4f = textureSample(x_texture2, texture2_smp, x_30);
//   FragColor = mix(x_24, x_31, vec4f(0.20000000298023223877f, 0.20000000298023223877f, 0.20000000298023223877f, 0.20000000298023223877f));
//   return;
// }
//
// struct main_out {
//   @location(0)
//   FragColor_1 : vec4f,
// }
//
// @fragment
// fn main(@location(0) TexCoord_param : vec2f) -> main_out {
//   TexCoord = TexCoord_param;
//   main_1();
//   return main_out(FragColor);
// }
//
//
const fs_source_wgsl = [892]u8{
    0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x28, 0x6f, 0x66, 0x66, 0x2c, 0x20,
    0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f,
    0x72, 0x6d, 0x69, 0x74, 0x79, 0x29, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x3c, 0x70, 0x72, 0x69,
    0x76, 0x61, 0x74, 0x65, 0x3e, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20,
    0x3a, 0x20, 0x76, 0x65, 0x63, 0x34, 0x66, 0x3b, 0x0a, 0x0a, 0x40, 0x67, 0x72, 0x6f, 0x75, 0x70,
    0x28, 0x31, 0x29, 0x20, 0x40, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x28, 0x33, 0x32, 0x29,
    0x20, 0x76, 0x61, 0x72, 0x20, 0x78, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x20,
    0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x32, 0x64, 0x3c, 0x66, 0x33, 0x32,
    0x3e, 0x3b, 0x0a, 0x0a, 0x40, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x28, 0x31, 0x29, 0x20, 0x40, 0x62,
    0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x28, 0x34, 0x38, 0x29, 0x20, 0x76, 0x61, 0x72, 0x20, 0x74,
    0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x20, 0x3a, 0x20, 0x73, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x3c, 0x70, 0x72, 0x69, 0x76,
    0x61, 0x74, 0x65, 0x3e, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3a, 0x20,
    0x76, 0x65, 0x63, 0x32, 0x66, 0x3b, 0x0a, 0x0a, 0x40, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x28, 0x31,
    0x29, 0x20, 0x40, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x28, 0x33, 0x33, 0x29, 0x20, 0x76,
    0x61, 0x72, 0x20, 0x78, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x20, 0x3a, 0x20,
    0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x32, 0x64, 0x3c, 0x66, 0x33, 0x32, 0x3e, 0x3b,
    0x0a, 0x0a, 0x40, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x28, 0x31, 0x29, 0x20, 0x40, 0x62, 0x69, 0x6e,
    0x64, 0x69, 0x6e, 0x67, 0x28, 0x34, 0x39, 0x29, 0x20, 0x76, 0x61, 0x72, 0x20, 0x74, 0x65, 0x78,
    0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x70, 0x20, 0x3a, 0x20, 0x73, 0x61, 0x6d, 0x70,
    0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x0a, 0x66, 0x6e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x31, 0x28,
    0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78, 0x5f, 0x32, 0x33, 0x20, 0x3a,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x66, 0x20, 0x3d, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78, 0x5f, 0x32, 0x34, 0x20, 0x3a, 0x20,
    0x76, 0x65, 0x63, 0x34, 0x66, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53,
    0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x78, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31,
    0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x2c, 0x20,
    0x78, 0x5f, 0x32, 0x33, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78, 0x5f, 0x33,
    0x30, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x66, 0x20, 0x3d, 0x20, 0x54, 0x65, 0x78, 0x43,
    0x6f, 0x6f, 0x72, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x78, 0x5f, 0x33, 0x31,
    0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x34, 0x66, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75,
    0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x78, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75,
    0x72, 0x65, 0x32, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x5f, 0x73, 0x6d,
    0x70, 0x2c, 0x20, 0x78, 0x5f, 0x33, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x46, 0x72, 0x61, 0x67,
    0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x78, 0x5f, 0x32, 0x34,
    0x2c, 0x20, 0x78, 0x5f, 0x33, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x66, 0x28, 0x30, 0x2e,
    0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32,
    0x33, 0x38, 0x37, 0x37, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32, 0x33, 0x38, 0x37, 0x37, 0x66, 0x2c, 0x20,
    0x30, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33,
    0x32, 0x32, 0x33, 0x38, 0x37, 0x37, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x32, 0x39, 0x38, 0x30, 0x32, 0x33, 0x32, 0x32, 0x33, 0x38, 0x37, 0x37, 0x66,
    0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a,
    0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
    0x20, 0x7b, 0x0a, 0x20, 0x20, 0x40, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x30,
    0x29, 0x0a, 0x20, 0x20, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20,
    0x3a, 0x20, 0x76, 0x65, 0x63, 0x34, 0x66, 0x2c, 0x0a, 0x7d, 0x0a, 0x0a, 0x40, 0x66, 0x72, 0x61,
    0x67, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x66, 0x6e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x40, 0x6c,
    0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x30, 0x29, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f,
    0x6f, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32,
    0x66, 0x29, 0x20, 0x2d, 0x3e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x7b,
    0x0a, 0x20, 0x20, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x54, 0x65,
    0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x3b, 0x0a, 0x20, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x31, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75,
    0x72, 0x6e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x28, 0x46, 0x72, 0x61, 0x67,
    0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
};
pub fn simpleShaderDesc(backend: sg.Backend) sg.ShaderDesc {
    var desc: sg.ShaderDesc = .{};
    switch (backend) {
        .GLCORE33 => {
            desc.attrs[0].name = "aPos";
            desc.attrs[1].name = "aTexCoord";
            desc.vs.source = &vs_source_glsl330;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = .STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
            desc.vs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
            desc.fs.source = &fs_source_glsl330;
            desc.fs.entry = "main";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sample_type = .FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = ._2D;
            desc.fs.images[1].sample_type = .FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = .FILTERING;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = .FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "_texture1_texture1_smp";
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[1].glsl_name = "_texture2_texture2_smp";
            desc.label = "simple_shader";
        },
        .GLES3 => {
            desc.attrs[0].name = "aPos";
            desc.attrs[1].name = "aTexCoord";
            desc.vs.source = &vs_source_glsl300es;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = .STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
            desc.vs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
            desc.fs.source = &fs_source_glsl300es;
            desc.fs.entry = "main";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sample_type = .FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = ._2D;
            desc.fs.images[1].sample_type = .FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = .FILTERING;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = .FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "_texture1_texture1_smp";
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[1].glsl_name = "_texture2_texture2_smp";
            desc.label = "simple_shader";
        },
        .D3D11 => {
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.attrs[1].sem_name = "TEXCOORD";
            desc.attrs[1].sem_index = 1;
            desc.vs.source = &vs_source_hlsl4;
            desc.vs.d3d11_target = "vs_4_0";
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = .STD140;
            desc.fs.source = &fs_source_hlsl4;
            desc.fs.d3d11_target = "ps_4_0";
            desc.fs.entry = "main";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sample_type = .FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = ._2D;
            desc.fs.images[1].sample_type = .FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = .FILTERING;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = .FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.label = "simple_shader";
        },
        .METAL_MACOS => {
            desc.vs.source = &vs_source_metal_macos;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = .STD140;
            desc.fs.source = &fs_source_metal_macos;
            desc.fs.entry = "main0";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sample_type = .FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = ._2D;
            desc.fs.images[1].sample_type = .FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = .FILTERING;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = .FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.label = "simple_shader";
        },
        .WGPU => {
            desc.vs.source = &vs_source_wgsl;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = .STD140;
            desc.fs.source = &fs_source_wgsl;
            desc.fs.entry = "main";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sample_type = .FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = ._2D;
            desc.fs.images[1].sample_type = .FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = .FILTERING;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = .FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.label = "simple_shader";
        },
        else => {},
    }
    return desc;
}
